Alur Git
1. Inisialisasi Git
    Mari Mempelajari Git
    Saat membuat website, Kemungkinan besar, Anda akan berkolaborasi dengan orang lain.
    Git adalah tool yang memudahkan Anda untuk melakukan pengembangan dan berkolaborasi dengan tim Anda.
    Mari kita mempelajari Git dengan Ninja Ken dan Guru Domba!
    (Anda direkomendasikan untuk menyelesaikan Command Line Study I sebelum pelajaran ini.)
    
    Ninja Ken dan Guru Domba akan membuat website bersama-sama.
    Sementara Ken baru pertama kali mencoba pengembangan tim, Guru Domba sudah ahli. Mari mempelajari Git sambil mengikuti pengalaman pengembangan tim mereka.
    
    Git dan Pengembangan Tim
    
    N: Aku belum pernah melakukan pengembangan tim sebelumnya. Dari mana aku harus memulai?

    D: Untuk pengembangan tim, kita akan menggunakan Git.
       Mari kita mulai mempelajari bagaimana menggunakannya sekarang.

    N: Oke, aku siap!
    
    D: Git dioperasikan dari terminal.
       Pertama, untuk memulai, kamu perlu untuk menjalankan command git init.
       Kamu tidak perlu untuk mengetik $ yang muncul pada terminal.
       (init= initialize
    
    N: Oh. Aku akan mencobanya!
    
    > ■ Masukkan command di bawah ke dalam Terminal
    > git init
    
2. Menambahkan File untuk Dibagikan
    D: Ada 3 langkah pada pengembangan tim.
       Lihat pada step 2 & 3. Kamu perlu untuk membagikan code yang kamu tulis dengan orang lain untuk melakukan pengembangan tim. Itu gunanya Git.
       
       Alur Kerja Git
       Step 1 = Buat perubahan ke file
       Step 2 = Persiapan untuk membagikan perubahan
       Step 3 = Bagikan perubahan
    
    N: Aku baru membuat file index.html! Jadi, bagaimana aku bisa membagikannya?
    
    D: Pertama, kamu perlu memilih file-file yang ingin kamu bagikan.
       Untuk memilih sebuah file, gunakan command git add file_name.
       
    > ■ Masukkan command ke dalam Terminal
    > git add index.html
    
3. Menyimpan File yang Ditambahkan
    Merekam File yang Dipilih
    N: Oke, aku menggunakan git add untuk memilih sebuah file!

    D: Bagus! Ada satu langkah lagi sebelum kita bisa berbagi file.
       Kita akan simpan file-file yang dipilih dengan pesan. Lalu kita siap untuk membagikannya.

    N: Simpan... ?

    D: Benar. Jangan khawatir jika membingungkan sekarang. Akan lebih mudah sembari kamu belajar lebih jauh mengenai Git.
    
    git commit
    D: Untuk merekam file yang dipilih, jalankan command git commit -m "pesan"
       Kita menyebut penyimpanan seperti ini sebagai commit. Mohon diingat, ya.

    N: Apakah "pesannya" bisa apa saja?

    D: Pesan tersebut seharusnya mendeskripsikan konten yang mau di commit.
       Ngomong-ngomong, pesan ini disebut pesan commit dan biasanya pesan ini akan di buat dalam bahasa Inggris untuk mempermudah kerja sama dengan tim internasional.
       
    Workflow Pengembangan Tim
    D: Dengan git add dan git commit, 2 command yang sudah kita pelajari, kamu sudah siap untuk berbagi file.
       
       Alur Kerja Git
       Step 1 Selesai
       Step 2 Selesai
    
    N: Baik! Jadi, kita sudah menyelesaikan langkah 1 dan 2!
    
    > ■ Masukkan command ke dalam Terminal
    > git commit -m "Created index.html"
    
4. Menambah Remote Repository
    Proses Berbagi
    N: Aku menyelesaikan sebuah commit! Sekarang persiapannya selesai, kan?
       Tapi, sekarang bagaimana bisa aku membagikan file?

    D: Git menggunakan sesuatu yang disebut remote (atau remote repository) untuk menyimpan file-file yang dibagikan.
       Pengembang membagikan file dengan mengunggah ke dan mengunduh dari remote.
       
    Ninja Ken - "Unggah" > Remote - "Unduh" > Guru Domba
    
    Mengatur Remote
    N: Oke. Jadi aku perlu membuat remote?
    
    D: Iya. Tapi kita tidak perlu mengkhawatirkannya sekarang karena kita dapat menggunakan sebuah layanan, seperti Github,  untuk membuatnya dengan mudah.
       Kali ini aku sudah menyiapkan sebuah remote, jadi kita sudah siap.
       Aku akan menjelaskan bagaimana cara membuat remote nanti, jadi tidak usah khawatir.
    
    Menambah Remote
    D: Kamu perlu URL remote untuk mengunggah. Ini adalah URL remote yang aku siapkan kali ini https://prog-8.com/mysite.git
       Saat kamu menambahkan remote, kamu akan memerlukan nama. Biasanya, pengembang menggunakan nama origin.
       Lebih spesifik, untuk mendaftarkan remote, ketik git remote add remote_name URL, seperti pada gambar di kanan.
       
    N: Baik! Aku akan mencobanya!
    
    > ■ Masukkan command berikut ke dalam Terminal
    > git remote add origin https://prog-8.com/mysite.git
    
5. Mengunggah File
    Mengunggah File ke Remote
    N: Aku berhasil menambah remote repository ke git!

    D: Oke, sekarang mari coba mengunggah sebuah file ke remote! Kita dapat mengunggah ke remote yang kita buat sebelumnya dengan menjalankan: git push origin master 
       Mengunggah seperti ini dengan Git disebut push.
       
    > ■ Masukkan command berikut ke dalam Terminal
    > $ git push origin master
    
6. Mengunduh File
    Mengunduh File dari Remote
    N: Aku telah melakukan push Git!

    D: Bagus, aku akan mengunduh file yang kamu push ke komputerku. Aku dapat mengunduh file dengan menjalankan git pull origin master
       Mengunduh file seperti ini disebut pull. Kamu harus mengingatnya.
       
    > ■ Masukkan command berikut ke dalam Terminal
    > git pull origin master
    
7. Meninjau Alur Git
    Berlatih Alur Kerja Pengembangan Tim
    D: Aku bisa pull file yang kamu buat, Ken.
       Sekarang, mari kita meninjau ulang apa yang sudah kita pelajari sejauh ini. Dengan 4 command di kanan, kita sudah dapat berbagi file satu sama lain.
    =>add=>commit=>push=>pull=>
    
    > ■ Masukkan command berikut ke Terminal Guru Domba
    > git add stylesheet.css
    > git commit -m "Create stylesheet.css"
    > git push origin master
    
    > ■ Masukkan command berikut ke Terminal Ninja Ken
    > git pull origin master
    
8. git status
    Menguasai Git
    N: Guru Domba, aku sudah menjadi master Git juga!

    D: Wah, jangan sombong dulu.
       Masih banyak yang perlu dipelajari tentang Git.
       Ayo kita mulai belajar Git lebih dalam lagi.

    N: Oh... aku akan melakukan yang terbaik!
    
    Poin-Poin Penting Mengenai Git
    D: Dalam pengembangan tim, penting untuk mengenali perubahan-perubahan yang kamu buat dan memilih perubahan apa yang harus kamu bagikan dengan timmu.

    N: Benar. Pasti akan jadi masalah jika aku membagikan code yang tidak komplit tanpa disengaja.

    D: Tepat. Maka dari itu mari kita belajar bagaimana mengenali dan memilih code yang kita bagikan.
    [Code Komplit] Bagikan ! | [Code tidak Komplit] Jangan di Bagikan!
    
    Mengenali File-File yang Dimodifikasi
    D: Pertama, penting untuk mengenali perubahan-perubahan yang kamu sudah lakukan. 
       Dengan menggunakan git status, kamu dapat menampilkan daftar file-file yang sudah dimodifikasi.

    N: Oh, bagus, bahkan jika ada banyak file, aku bisa mengetahui dimana saja perubahan sudah dibuat.
    
    > ■ Masukkan command berikut ke dalam Terminal
    > git status
    
9. git diff
    Mengenali Perubahan-Perubahan Konten
    N: git status benar-benar berguna! Bisakah aku melihat perubahan kontennya juga?

    D: Pertanyaan bagus! Ini adalah command untuk melihat perubahan konten: git diff.
       Seperti bisa dilihat di kanan, bagian-bagian yang ditambahkan berwarna hijau. 

    N: Itu sangat berguna!
    
    Melihat git diff
    D: Ada lagi. Code yang dimodifikasi akan ditampilkan, seperti bisa dilihat di kanan, dengan code sesudah warnanya hijau dan code sebelum warnanya merah.

    N: Oke. Dengan ini kamu bisa mengenali apa saja yang akan kamu bagikan dengan orang lain.

    D: Benar. Kamu bisa mengonfirmasi perubahan-perubahan dan menjalankan git add dengan percaya diri.
    
    > ■ Masukkan command berikut ke dalam Terminal
    > git diff
    > git add index.html
    
10. git status (2)
    Mengecek File-File yang Ditambahkan
    N: Tunggu, file apa yang aku tambahkan sebelumnya? Apakah index.html?
       Aku lupa file apa saja yang aku tambahkan...

    D: Jika seperti itu, kamu bisa menggunakan git status lagi. Kamu bisa mengecek file mana saja yang sudah atau belum ditambahkan.
       Saat kamu menjalankan git status, file-file yang ditambahkan akan berwarna hijau dan yang belum ditambahkan berwarna merah.
       
    > ■ Masukkan command berikut ke dalam Terminal
    > git status
    > git add stylesheet.css
    
11. Pesan Commit
    Menulis Pesan Commit yang Baik
    N: Oke, sekarang aku bisa mengonfirmasi semua perubahan sebelum aku menjalankan add. Selanjutnya adalah commit. Apakah aku hanya harus mengetik git commit -m "Fix" ?

    D: Oh, tunggu, Ken.
       Pesan commit itu belum benar.
       Kamu harus menulis pesan commit yang deskriptif sehingga jika seseorang melihatnya, mereka bisa mengerti dengan mudah perubahan apa yang sudah dibuat.

    N: Oh, baik! Kali ini, aku mengubah warna anak judul. Jadi, bagaimana ini?
       git commit -m "Change subtitle color"

    D: Ya, ya, lebih seperti itu.
    
    > ■ Masukkan command berikut ke dalam Terminal
    > git commit -m "Change subtitle color"
    > git push origin master
    
12. git log
    git log
    N: Sebelumnya kamu bilang aku harus menulis pesan commit yang bisa dimengerti dengan mudah oleh orang lain, tapi bagaimana mereka bisa terlihat?

    D: Pertanyaan bagus, sekali lagi!
       Dengan menggunakan command git log, kamu atau orang lain dapat melihat commit-commit.
       
    git log -p
    N: Dengan git log, bisakah aku melihat kedua pesan commit dan perubahan-perubahan yang dibuat?

    D: Untuk melihat perubahan-perubahan, kamu bisa menggunakan git log -p.
       Dengan panah atas dan bawah, kamu dapat bergulir ke seluruh perubahan. Untuk keluar, cukup tekan tombol Q.
    
    > ■ Masukkan command berikut ke dalam Terminal
    > git pull origin master
    > git log
    > git log -p
    
End ~
